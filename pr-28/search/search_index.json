{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Deep Learning and Go Project","text":"<p>Welcome to the documentation for the Deep Learning and Go Project. This project is a personal implementation and exploration of the concepts presented in the book \"Deep Learning and the Game of Go\" by Max Pumperla and Kevin Ferguson.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>This project serves as a learning exercise and a practical application of deep learning techniques in the context of the game of Go. It aims to implement various Go-playing bots, from simple random players to more advanced AI using Monte Carlo Tree Search (MCTS) and neural networks.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Implementation of Go game rules and board representation</li> <li>Various AI players, including random and MCTS-based bots</li> <li>Tools for generating and processing game data</li> <li>Integration with TensorFlow for deep learning models</li> <li>Comprehensive unit testing suite</li> </ul>"},{"location":"#documentation-contents","title":"Documentation Contents","text":"<ul> <li>About: Detailed information about the project, its goals, and technical stack.</li> <li>Getting Started: Instructions on how to set up and start using the project.</li> <li>Chapter Guides:</li> <li>Chapter 6: Developing a Machine Learning Application: Guide for running Chapter 6 related code.</li> <li>Chapter 7: Learning from Data: Guide for running Chapter 7 related code.</li> <li>API Reference: Documentation of the project's modules and functions.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>This is primarily a personal learning project. While not open for direct contributions, observations and suggestions are welcome. Please open an issue in the repository if you'd like to discuss any aspect of the project.</p>"},{"location":"#license-and-attribution","title":"License and Attribution","text":"<p>This project is created for educational purposes and is not intended for commercial use. All credit for the original concepts, algorithms, and code structure goes to the authors of \"Deep Learning and the Game of Go.\"</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Special thanks to Max Pumperla and Kevin Ferguson for writing \"Deep Learning and the Game of Go,\" which serves as the foundation and inspiration for this project.</p>"},{"location":"about/","title":"About Deep Learning and Go Project","text":""},{"location":"about/#project-background","title":"Project Background","text":"<p>This project is a personal implementation and exploration of the concepts presented in the book \"Deep Learning and the Game of Go\" by Max Pumperla and Kevin Ferguson. It serves as an educational journey into the intersection of artificial intelligence, deep learning, and the ancient game of Go.</p>"},{"location":"about/#motivation","title":"Motivation","text":"<p>The primary motivation behind this project is to gain a comprehensive understanding of how modern AI techniques can be applied to complex strategic games like Go. By implementing the algorithms and models described in the book, we aim to:</p> <ol> <li>Deepen our understanding of deep learning concepts</li> <li>Explore the intricacies of the game of Go from a computational perspective</li> <li>Gain practical experience in implementing and testing AI models</li> </ol>"},{"location":"about/#key-features","title":"Key Features","text":"<ul> <li>Implementation of various Go-playing bots, including random and MCTS-based players</li> <li>Tools for generating and processing game data</li> <li>Integration with deep learning frameworks for model training and evaluation</li> <li>Comprehensive unit testing suite</li> </ul>"},{"location":"about/#technical-stack","title":"Technical Stack","text":"<ul> <li>Programming Language: Python</li> <li>Deep Learning Framework: TensorFlow (with potential future ports to PyTorch)</li> <li>Testing Framework: pytest</li> <li>Package Management: Poetry</li> <li>Version Control: Git</li> <li>Continuous Integration: GitHub Actions</li> <li>Code Coverage: Codecov.io</li> </ul>"},{"location":"about/#project-structure","title":"Project Structure","text":"<p>The project is organized into several key components:</p> <ol> <li>Core Go Logic: Implementation of Go game rules and board representation</li> <li>AI Players: Various bot implementations, from simple random players to more advanced MCTS-based ones</li> <li>Data Generation: Scripts and tools for creating training datasets</li> <li>Model Training: Implementation of deep learning models for Go strategy</li> <li>Evaluation: Tools for assessing the performance of different AI players</li> </ol>"},{"location":"about/#development-approach","title":"Development Approach","text":"<p>Our development process is iterative and focused on learning:</p> <ol> <li>Study and understand concepts from the book</li> <li>Implement core functionality based on book examples</li> <li>Refactor and optimize code for clarity and performance</li> <li>Add comprehensive unit tests, often generated with AI assistance</li> <li>Continuously integrate new learnings and improvements</li> </ol>"},{"location":"about/#ai-assisted-development","title":"AI-Assisted Development","text":"<p>A unique aspect of this project is the integration of AI in the development process itself:</p> <ul> <li>Many unit tests are initially generated using Large Language Models (LLMs) like Claude 3.5 Sonnet and GPT-4</li> <li>These AI-generated tests are carefully reviewed, modified, and integrated into the project</li> <li>This approach allows for rapid development of a comprehensive test suite while also serving as a learning tool</li> </ul>"},{"location":"about/#code-coverage","title":"Code Coverage","text":"<p>We use Codecov.io to measure and track code coverage. You can view the current coverage status and detailed reports at:</p> <p>https://app.codecov.io/gh/ghiret/my_go_player</p>"},{"location":"about/#acknowledgements","title":"Acknowledgements","text":"<p>We extend our gratitude to Max Pumperla and Kevin Ferguson for their excellent book \"Deep Learning and the Game of Go,\" which serves as the foundation for this project. Their work has made complex AI concepts accessible and applicable to this fascinating domain.</p>"},{"location":"chapter6/","title":"Chapter 6: Developing a Machine Learning Application","text":"<p>This guide covers the code and concepts related to Chapter 6 of \"Deep Learning and the Game of Go.\"</p>"},{"location":"chapter6/#running-a-game-random-bot-vs-random-bot","title":"Running a Game: Random Bot vs Random Bot","text":"<p>To simulate a game between two random bots:</p> <pre><code>poetry run python src/scripts/random_bot_vs_random_bot.py\n</code></pre> <p>This script demonstrates the basic game mechanics and how simple AI players make moves.</p>"},{"location":"chapter6/#playing-against-the-random-bot","title":"Playing Against the Random Bot","text":"<p>To play a game against the random bot:</p> <pre><code>poetry run python src/scripts/human_vs_random_bot.py\n</code></pre> <p>This interactive script allows you to play against a bot that makes random moves, helping you understand the game flow and bot interaction.</p>"},{"location":"chapter6/#understanding-the-code","title":"Understanding the Code","text":"<p>These scripts utilize the core game logic and the random bot implementation. Key components include:</p> <ul> <li><code>src/go_engine/</code>: Contains the core Go game logic.</li> <li><code>src/bots/random_bot.py</code>: Implements the random bot player.</li> </ul> <p>Explore these files to understand how the game state is managed and how the random bot makes decisions.</p>"},{"location":"chapter7/","title":"Chapter 7: Learning from Data","text":"<p>This guide covers the code and concepts related to Chapter 7 of \"Deep Learning and the Game of Go,\" focusing on generating and processing game data.</p>"},{"location":"chapter7/#generating-mcts-game-data","title":"Generating MCTS Game Data","text":"<p>To generate game data using Monte Carlo Tree Search (MCTS):</p> <pre><code>poetry run python src/scripts/generate_mcts_games.py -n 20 --board-out features.npy --move-out labels.npy -b 5\n</code></pre> <p>This command: - Generates 20 games (<code>-n 20</code>) - Saves board positions to <code>features.npy</code> - Saves corresponding moves to <code>labels.npy</code> - Uses a 5x5 board (<code>-b 5</code>)</p> <p>You can adjust these parameters as needed.</p>"},{"location":"chapter7/#understanding-the-generated-data","title":"Understanding the Generated Data","text":"<ul> <li><code>features.npy</code>: Contains the board positions (features) for each move.</li> <li><code>labels.npy</code>: Contains the corresponding moves (labels) made by the MCTS bot.</li> </ul> <p>This data can be used to train machine learning models to predict moves based on board positions.</p>"},{"location":"chapter7/#next-steps","title":"Next Steps","text":"<p>After generating the data: 1. Explore the generated <code>.npy</code> files using numpy to understand their structure. 2. Use this data to train a neural network model (covered in later chapters).</p>"},{"location":"chapter7/#key-components","title":"Key Components","text":"<ul> <li><code>src/scripts/generate_mcts_games.py</code>: The main script for generating game data.</li> <li><code>src/bots/mcts_bot.py</code>: Implements the Monte Carlo Tree Search bot.</li> </ul> <p>Dive into these files to understand how MCTS works and how the game data is generated and structured.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you set up and start using the Deep Learning and Go Project.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.7 or higher</li> <li>Git</li> <li>Poetry (for dependency management)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository:    <code>git clone https://github.com/ghiret/my_go_player.git    cd my_go_player</code></p> </li> <li> <p>Install dependencies using Poetry:    <code>poetry install</code></p> </li> <li> <p>(Optional) If you're using an Apple Silicon Mac and want to configure GPU support:    <code>python3.11 -m venv venv311    source venv311/bin/activate    poetry install    poetry run python src/misc/validate_gpu_config.py</code></p> </li> </ol>"},{"location":"getting-started/#verifying-installation","title":"Verifying Installation","text":"<p>To ensure everything is set up correctly, you can run the unit tests:</p> <pre><code>poetry run pytest\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have the project set up, you can explore the different components:</p> <ul> <li>Check out the Chapter 6 Guide to start developing a machine learning application for Go.</li> <li>Move on to the Chapter 7 Guide to learn about processing and learning from Go game data.</li> </ul> <p>For more detailed information about the project structure and components, refer to the About page.</p>"}]}